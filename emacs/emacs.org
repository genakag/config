#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* My Emacs Config
** Initial Setup
   These have to be at the top of the init.el file
*** Packages
    #+begin_src emacs-lisp :results none
      ;; Setup package
      (require 'package)

      (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                               ("melpa-stable" . "https://stable.melpa.org/packages/")
                               ("org" . "https://orgmode.org/elpa/")
                               ("elpa" . "https://elpa.gnu.org/packages/")))
      (package-initialize)

      ;; Setup use-package
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t)
      (setq use-package-always-demand t)
    #+end_src

*** Files
    #+begin_src emacs-lisp :results none

      ;; Keep .emacs.d directory clean
      (setq no-littering-etc-directory
            (expand-file-name "config/" user-emacs-directory))
      (setq no-littering-var-directory
            (expand-file-name "data/" user-emacs-directory))

      (use-package no-littering
        :config 
        (setq auto-save-file-name-transforms
              `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
        (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
        (load custom-file t))

      ;; Use UTF-8
      (prefer-coding-system 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (setq default-buffer-file-coding-system 'utf-8)

      ;; Autosave changed files
      (use-package super-save
        :diminish super-save-mode
        :config
        (super-save-mode +1)
        (setq super-save-auto-save-when-idle t))
    #+end_src

*** Keybindings
    #+begin_src emacs-lisp :results none
      (use-package general)
    #+end_src
    
** Keybindings
**** Vim
     #+begin_src emacs-lisp :results none
       ;; Vim keybindings
       (use-package evil
         :init
         (setq evil-want-integration t)
         (setq evil-want-keybinding nil)
         (setq evil-want-C-u-scroll t)
         (setq evil-want-C-i-jump nil)
         :config
         (evil-mode 1)
         (evil-define-key 'insert 'global
           (kbd "C-g") 'evil-normal-state)

         (general-def '(motion normal visual)
           "SPC" nil
           "RET" nil
           "TAB" nil
           "C-o" nil ; Open files
           "C-O" nil ; Open new files
           "C-k" nil
           ;; Always use visual motion
           "j" 'evil-next-visual-line
           "k" 'evil-previous-visual-line
           ;; Custom motion commands
           "J" 'evil-scroll-down
           "K" 'evil-scroll-up
           )

         (general-def 'normal
           ;; Custom delete commands
           "d" (general-key-dispatch 'evil-delete
                 "n" 'evil-join))

         (evil-set-initial-state 'messages-buffer-mode 'normal)
         (evil-set-initial-state 'dashboard-mode 'normal))

       (use-package evil-collection
         :after evil
         :config
         (evil-collection-init))


     #+end_src

**** Keybindings
     #+begin_src emacs-lisp :results none
       (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

       ;; File keybindings
       (general-def
         "C-a" 'mark-whole-buffer
         "C-o" 'find-file
         ;"C-w" 'kill-current-buffer
         )

       ;; leader key
       (general-create-definer gn/leader-keys
         :states '(motion normal visual)
         :prefix "SPC"
         :keymaps 'override
         :global-prefix "C-SPC")

       (gn/leader-keys
         ":" 'execute-extended-command
         "h" '(:ignore h :which-key "help")
         "hh" 'help-for-help
         "hb" 'describe-bindings
         "hf" 'describe-function
         "hk" 'describe-key
         "hv" 'describe-variable
         "m" '(:ignore m :which-key "modes")
         "mw" 'whitespace-mode
         )

       (gn/leader-keys 'normal emacs-lisp-mode-map
         "e" 'eval-defun)

       (gn/leader-keys 'visual emacs-lisp-mode-map
         "e" 'eval-region)
     #+end_src

** Screen
**** UI
     #+begin_src emacs-lisp :results none
       (setq inhibit-startup-message t) ; Prevent launch message
       (menu-bar-mode -1) ; Disable the menu bar
       (tool-bar-mode -1) ; Disable the tool bar


     #+end_src
**** Style
     #+begin_src emacs-lisp :results none
       ;; Theme
       (use-package doom-themes
         :config
         (setq doom-themes-enable-bold t
               doom-themes-enable-italic t)
         (load-theme 'doom-one t)
         (doom-themes-org-config))

       (use-package rainbow-delimiters
         :hook (prog-mode . rainbow-delimiters-mode))
       (use-package paren
         :config
         (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
         (show-paren-mode 1))

       ;; Display available keybindings
       (use-package which-key
         :init (which-key-mode)
         :diminish which-key-mode
         :config
         (setq which-key-idle-delay 0.3))
     #+end_src

** Autocomplete
   Setup completion tool
   #+begin_src emacs-lisp
     (use-package ivy
       :bind (:map ivy-minibuffer-map
                   ("TAB" . ivy-alt-done)
                   ("C-l" . ivy-alt-done)
                   ("C-j" . ivy-next-line)
                   ("C-k" . ivy-previous-line)
                   :map ivy-switch-buffer-map
                   ("C-k" . ivy-previous-line)
                   ("C-l" . ivy-done)
                   ("C-d" . ivy-switch-buffer-kill)
                   :map ivy-reverse-i-search-map
                   ("C-k" . ivy-previous-line)
                   ("C-d" . ivy-reverse-i-search-kill))
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-height 20)
       (ivy-mode t))

     (use-package counsel
       :after ivy
       :config
       (define-key (current-global-map) [remap execute-extended-command] 'counsel-M-x)
       (define-key (current-global-map) [remap find-file] 'counsel-find-file)
       (define-key (current-global-map) [remap describe-function] 'counsel-describe-function)
       (define-key (current-global-map) [remap describe-variable] 'counsel-describe-variable))
   #+end_src

** Editor 
   Prevent tabs when indenting
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

   #+RESULTS:

** Packages
*** Org Mode

    #+begin_src emacs-lisp :results none
      (use-package org
        :config
        ;; General org mode stuff
        (gn/leader-keys '(motion normal visual) org-mode-map
          "e" 'org-ctrl-c-ctrl-c
          )

        ;; Movement
        (general-def '(motion normal visual) org-mode-map
          "K" 'org-previous-visible-heading
          "J" 'org-next-visible-heading
          )

        ;; Capture
        (defvar gn/org-capture-path "~/todo/inbox.org"
          "The path to the .org file which org-capture places the entry")

        (setq org-capture-templates
              '(("i" "Inbox" entry (file gn/org-capture-path)
                 "* ")))
        (gn/leader-keys 
          "c" 'org-capture
          )

        (gn/leader-keys 'normal org-capture-mode-map
          "c" 'org-capture-finalize)

        (gn/leader-keys 'normal org-mode-map
          "s" '(:ignore s :which-key "src")
          "se" 'org-edit-special
          "st" 'org-babel-tangle
          "i" '(:ignore i :which-key "insert")
          "it" 'org-insert-structure-template
          )

        (gn/leader-keys 'normal org-src-mode-map
          "s" '(:ignore s :which-key "src")
          "se" 'org-edit-src-exit
          )
        )
    #+end_src
*** PlantUML
    #+begin_src emacs-lisp :results none
      (use-package plantuml-mode
        :config
        (setq plantuml-jar-path "~/config/emacs/plantuml.jar")
        (setq plantuml-default-exec-mode 'jar)
        (setq plantuml-output-type "svg")
        ;; Make plantuml available in org mode 
        (add-to-list
         'org-src-lang-modes '("plantuml" . plantuml))

        (gn/leader-keys '(motion normal visual) 'plantuml-mode-map
         "e" 'plantuml-preview-buffer)
        )
    #+end_src
    

*** Magit
    #+begin_src emacs-lisp :results none
      (use-package magit
        :config
        ;; Close transient with ESC
        (general-def transient-map
          "<escape>" 'transient-quit-one)

        (gn/leader-keys
          "v" 'magit-status)
        )
    #+end_src

    
    
    
    
